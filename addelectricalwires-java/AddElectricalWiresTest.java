import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

public class AddElectricalWiresTest {

    protected AddElectricalWires solution;

    @Before
    public void setUp() {
        solution = new AddElectricalWires();
    }

    @Test(timeout = 2000)
    public void testCase0() {
        String[] wires = new String[]{"000", "000", "000"};
        int[] gridConnections = new int[]{0};

        int expected = 3;
        int actual = solution.maxNewWires(wires, gridConnections);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase1() {
        String[] wires = new String[]{"000", "000", "000"};
        int[] gridConnections = new int[]{0, 1};

        int expected = 1;
        int actual = solution.maxNewWires(wires, gridConnections);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase2() {
        String[] wires = new String[]{"01", "10"};
        int[] gridConnections = new int[]{0};

        int expected = 0;
        int actual = solution.maxNewWires(wires, gridConnections);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase3() {
        String[] wires = new String[]{"00000", "00000", "00000", "00000", "00000"};
        int[] gridConnections = new int[]{0, 1, 2, 3, 4};

        int expected = 0;
        int actual = solution.maxNewWires(wires, gridConnections);

        Assert.assertEquals(expected, actual);
    }

    @Test(timeout = 2000)
    public void testCase4() {
        String[] wires = new String[]{"01000", "10100", "01010", "00100", "00000"};
        int[] gridConnections = new int[]{2, 4};

        int expected = 3;
        int actual = solution.maxNewWires(wires, gridConnections);

        Assert.assertEquals(expected, actual);
    }
    @Test(timeout = 2000)
    public void sysTestCase13() {
        String[] wires = new String[]{"00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000100001001000000000", "00000000000000000000000100000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000100000001000000000000000", "00000000000000000000000000000100000000000000000000", "00000000000000000000000010000000000000000000000000", "00000000000000000000000011000000000000000000000000", "00000000000000010000000000000000000000000000000000", "00000000000000000000010000000001001000000011000000", "00000000000000100001000000000000000000001000000000", "00000000000000000000000000000000000000000000000100", "00000000000010000000000000000000000000000000000001", "00000000001000000000000000001000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000100001000000000010000000", "00000000000010000000001000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000100000000000000100000001000000001000000", "00000000000000000001000000000000000010000000000001", "00001000000000000000000000000000000100000000000000", "00000000110000000000000000000000000000000000000000", "00000000010000000000000000000000000000000000000000", "00000010000000000010010000000000000000000010000000", "00000000000000000000000000000000000000000000000000", "00000000000000010000000000000000000000000000000000", "00000001000000000000000000000000000000000000000000", "00000000000000000000000000000000010000000000000000", "00000000000100000010000000000000000000000010000000", "00010000000000000000000000000000000000000000000010", "00000000000000000000000000000010000000000000000000", "00000010000100000000010000000000000000000000000000", "00000000000000000000000100000000000000000000000000", "00000000000000000000001000000000000001000000000000", "00010000000000000000000000000000000010000000000011", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00010000000010000000000000000000000000000100000001", "00000000000000000000000000000000000000001000000000", "00000000000100000010000000100001000000000000000000", "00000000000100000000010000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000000000000000000000000000000000000000000", "00000000000001000000000000000000000000000000000000", "00000000000000000000000000000000100001000000000000", "00000000000000100000001000000000000001001000000000"};
        int[] gridConnections = new int[]{11, 16, 28, 4, 7, 24, 33, 41};

        int expected = 334;
        int actual = solution.maxNewWires(wires, gridConnections);

        Assert.assertEquals(expected, actual);
    }
    @Test(timeout = 2000)
    public void sysTestCase14() {
        String[] wires = new String[]{};
        int[] gridConnections = new int[]{34, 42, 6, 18, 3, 25, 15, 36};

        int expected = 410;
        int actual = solution.maxNewWires(wires, gridConnections);

        Assert.assertEquals(expected, actual);
    }

}
